plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'org.cadixdev.licenser' version '0.6.1'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '0.3.0'

version = version + (System.getenv("GITHUB_ACTIONS") ? "" : "+local")

group = 'org.quiltmc'
archivesBaseName = 'tiny-mappings-parser'

license {
	header file('HEADER')
	include '**/*.java'
}

sourceSets {
	asm
	mixin
	legacy // old deprecated stuff, to be removed in 0.4
}

repositories {
	mavenCentral()
	maven {
		name = 'Sponge'
		url = 'https://repo.spongepowered.org/repository/maven-snapshots/' // For 0.8.3-SNAPSHOT
	}

	maven {
		url = "https://maven.quiltmc.org/repository/release/"
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

dependencies {
	compileOnly 'org.checkerframework:checker-qual:3.3.0'
	// source-set specific stuff aren't exposed later
	asmImplementation 'org.ow2.asm:asm:8.0'
	asmImplementation 'org.ow2.asm:asm-analysis:8.0'
	asmImplementation 'org.ow2.asm:asm-commons:8.0'
	asmImplementation 'org.ow2.asm:asm-tree:8.0'
	asmImplementation 'org.ow2.asm:asm-util:8.0'

	// The mixin remapper implementation is unchanged from fabric's fork, so we can use upstream here
	mixinImplementation('org.spongepowered:mixin:0.8.3-SNAPSHOT') {
		transitive = false
	}

	testImplementation 'com.google.guava:guava:29.0-jre'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
}

sourceSets {
	asm.compileClasspath += main.compileClasspath
	asm.compileClasspath += main.output
	mixin.compileClasspath += main.compileClasspath
	mixin.compileClasspath += main.output
	legacy.compileClasspath += main.compileClasspath
	legacy.compileClasspath += asm.compileClasspath
	legacy.compileClasspath += mixin.compileClasspath
	test.compileClasspath += asm.output
	test.compileClasspath += mixin.output
	test.compileClasspath += legacy.output
	test.runtimeClasspath += asm.output
	test.runtimeClasspath += mixin.output
	test.runtimeClasspath += legacy.output
}

javadoc {
	options {
		if (file("README.html").exists()) {
			overview = "README.html"
		}
		source = "8"
		encoding = 'UTF-8'
		charSet = 'UTF-8'
		memberLevel = JavadocMemberLevel.PROTECTED
		links(
				'https://checkerframework.org/api/',
				'https://docs.oracle.com/javase/8/docs/api/',
				'https://asm.ow2.io/javadoc/'
		)
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption('Xdoclint:none', '-quiet')
	}
	source sourceSets.main.allJava.srcDirs, sourceSets.asm.allJava.srcDirs, sourceSets.mixin.allJava.srcDirs
	classpath += sourceSets.main.compileClasspath
	classpath += sourceSets.asm.compileClasspath
	classpath += sourceSets.mixin.compileClasspath
}

jar {
	from sourceSets.main.output
	from sourceSets.asm.output
	from sourceSets.mixin.output
	from sourceSets.legacy.output
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set 'sources'
	from sourceSets.main.allSource
	from sourceSets.asm.allSource
	from sourceSets.mixin.allSource
	from sourceSets.legacy.allSource
}

task javadocsJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier.set 'javadocs'
	from javadoc.destinationDir
}

artifacts {
	archives jar
	archives sourcesJar
	archives javadocsJar
}

test {
	useJUnitPlatform()
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java

			artifact sourcesJar
			artifact javadocsJar
		}
	}

	repositories {
		def ENV = System.getenv()

		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}
